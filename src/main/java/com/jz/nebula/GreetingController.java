package com.jz.nebula;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.jz.nebula.entity.Shipper;
import com.jz.nebula.entity.User;
import com.jz.nebula.repository.ShipperRepository;
import com.jz.nebula.repository.UserRepository;

@Controller
public class GreetingController {
	
	@Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private ShipperRepository shipperRepository;
	
	
	@Autowired
	private UserRepository userRepository;
	
	
    @GetMapping("/greeting")
    public String greeting(@RequestParam(name="name", required=false, defaultValue="World") String name, Model model) {
        model.addAttribute("name", name);
        return "greeting";
    }
    
	@GetMapping(path="/add") // Map ONLY GET Requests
	public @ResponseBody String addNewShipper (@RequestParam String name) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request

		Shipper n = new Shipper();
		n.setName(name);
		shipperRepository.save(n);
		return "Saved";
	}
	
	@GetMapping(path="/all")
	public @ResponseBody Iterable<Shipper> getAllShippers() {
		// This returns a JSON or XML with the users
		return shipperRepository.findAll();
	}
	
	@GetMapping(path="/user")
	public @ResponseBody User getUser() {
		// This returns a JSON or XML with the users
		return userRepository.findByUsername("joe");
	}
}